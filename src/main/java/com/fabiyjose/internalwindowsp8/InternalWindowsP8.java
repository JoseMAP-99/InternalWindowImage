package com.fabiyjose.internalwindowsp8;

import java.awt.Dimension;
import java.awt.Point;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author Fabián y José María
 */
public class InternalWindowsP8 extends javax.swing.JFrame {

    /**
     * Creates new form InternalWindowsP8
     */
    
    JFileChooser fc = new JFileChooser();
    FileNameExtensionFilter filter;
    String path = "";
    private boolean upload = false;
    private boolean filtered = false;
    Mat actImage = null;    
    private int width;
    private int height;    
    private final int defaultWidth = 732;
    private final int defaultHeight = 550;
    
    public InternalWindowsP8() {
        initComponents();
        initFilters();
        
        this.setLocationRelativeTo(null);
        this.setMinimumSize(new Dimension(this.defaultWidth+16, this.defaultHeight+63));
        this.setSize(new Dimension(1024, 768));
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        nu.pattern.OpenCV.loadShared();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    
    private void initFilters(){
        filter = new FileNameExtensionFilter("Images", "jpg", "jpeg");
        fc.addChoosableFileFilter(filter);
        fc.setAcceptAllFileFilterUsed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainDesktop = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        image = new javax.swing.JMenu();
        loadImage = new javax.swing.JMenuItem();
        saveImage = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        closeWindow = new javax.swing.JMenuItem();
        options = new javax.swing.JMenu();
        applyFilter = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("INTERNAL WINDOWS");

        jLabel1.setText("© Jose María & Fabián");

        mainDesktop.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout mainDesktopLayout = new javax.swing.GroupLayout(mainDesktop);
        mainDesktop.setLayout(mainDesktopLayout);
        mainDesktopLayout.setHorizontalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainDesktopLayout.createSequentialGroup()
                .addContainerGap(624, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );
        mainDesktopLayout.setVerticalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainDesktopLayout.createSequentialGroup()
                .addContainerGap(586, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        image.setMnemonic('I');
        image.setText("Image");

        loadImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        loadImage.setText("Load");
        loadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImageActionPerformed(evt);
            }
        });
        image.add(loadImage);

        saveImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveImage.setText("Save");
        saveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageActionPerformed(evt);
            }
        });
        image.add(saveImage);
        image.add(jSeparator1);

        closeWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        closeWindow.setText("Exit & close");
        closeWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeWindowActionPerformed(evt);
            }
        });
        image.add(closeWindow);

        jMenuBar1.add(image);

        options.setMnemonic('O');
        options.setText("Options");

        applyFilter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        applyFilter.setText("Apply filter");
        applyFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyFilterActionPerformed(evt);
            }
        });
        options.add(applyFilter);

        jMenuBar1.add(options);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");

        aboutMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenu);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainDesktop)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainDesktop)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteFrames (){
        JInternalFrame[] frames = mainDesktop.getAllFrames();
            
        for (JInternalFrame window : frames){
            window.dispose();
        }
    }
    
    public void loadImage(File img){      
        Mat temp = Imgcodecs.imread(img.getAbsolutePath());
        
        if (temp.width() > this.defaultWidth || temp.height() > this.defaultHeight){
            this.actImage = resize(temp);
        } else {
            this.actImage = temp;
        }  
        
        this.width = this.actImage.width();
        this.height = this.actImage.height();
        this.filtered = false;
    }
    
    public Mat resize(Mat tempImage){
                
        double reason = (double) tempImage.width()/(double) tempImage.height();
        int newHeight;
        int newWidth;
                
        if (tempImage.width() >= tempImage.height()){            
            newWidth = this.defaultWidth;
            newHeight = (int) (newWidth/reason);
        } else {
            newHeight = this.defaultHeight;
            newWidth = (int) (newHeight*reason);
        }
        
        Mat tempM = new Mat();
        Size tempS = new Size(newWidth, newHeight);
        Imgproc.resize(tempImage, tempM, tempS);
        return tempM;              
    }
    
    
    private Point getActualPoint(){
        int tempWidth = this.getSize().width/2;
        int tempHeight = this.getSize().height/2;   
        
        return new Point((int)tempWidth-(actImage.width()/2), (int)tempHeight-(actImage.height()/2));
    }
        
    
    private void loadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImageActionPerformed
        int res = fc.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION){
            File img = fc.getSelectedFile();
            
            if (!this.path.equals("") && !this.path.equals(img.getAbsolutePath())) deleteFrames();
            
            this.path = img.getAbsolutePath();
            
            loadImage(img);
            
            ActualWindow winActual = new ActualWindow(this.width, this.height, img.getName(), getActualPoint());
            winActual.viewActImage(this.actImage);
            
            mainDesktop.add(winActual);
            winActual.setVisible(true);
            this.upload = true;
        }
    }//GEN-LAST:event_loadImageActionPerformed

    private void closeWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeWindowActionPerformed
        int res = JOptionPane.showConfirmDialog(this, "This window will close. Proceed?",
            "CLOSE WINDOW", JOptionPane.YES_NO_CANCEL_OPTION);

        if (res == JOptionPane.YES_OPTION) this.dispose();
    }//GEN-LAST:event_closeWindowActionPerformed

    private void applyFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyFilterActionPerformed

        if (!this.upload) {
            JOptionPane.showConfirmDialog(this, "Please, first load an image",
                "LOAD AN IMAGE", JOptionPane.OK_CANCEL_OPTION);
            return;
        }

        String res;
        String msg = "Please, introduce a threshold between 0 and 255, both inclusive";

        do{
            res = JOptionPane.showInputDialog(this, msg, "THRESHOLD", JOptionPane.OK_CANCEL_OPTION);
            if (res == null) return;
            if (!(res.matches("^[0-9]+$") && Integer.parseInt(res) <= 255 && Integer.parseInt(res) >= 0)){
                msg = "Threshold must be between 0 and 255, both inclusive";
            }
        } while (!(res.matches("^[0-9]+$") && Integer.parseInt(res) <= 255 && Integer.parseInt(res) >= 0));
        
        
        ActualWindow filterImage = new ActualWindow(this.width, this.height, "Threshold: " + res, getActualPoint());
        filterImage.applyFilterImage(actImage, Integer.parseInt(res));        
        mainDesktop.add(filterImage);
        filterImage.setVisible(true);   
        this.filtered = true;
    }//GEN-LAST:event_applyFilterActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuActionPerformed
        JOptionPane.showMessageDialog(this,
            "To use the application you must first upload an image (.jpg or .jpeg),\n"
            + "then you may apply the filter from the 'Options' menu where you will be\n"
            + "asked to introduce a range of values between 0 and 255, where 0 corresponds\n"
            + "to full white and 255 to full black. Every time you apply a filter to the original\n"
            + "image, a new window will pop out showing the result.", "HELP MESSAGE", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void saveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageActionPerformed
        if (!this.upload) {
            JOptionPane.showConfirmDialog(this, "Please, first load an image",
                "LOAD AN IMAGE", JOptionPane.OK_CANCEL_OPTION);
            return;
        }else if (!this.filtered){
            JOptionPane.showConfirmDialog(this, "Please, apply thresholding to save an image", 
                    "APPLY THRESHOLDING", JOptionPane.OK_CANCEL_OPTION);
            return;  
        }
        
        int res = fc.showSaveDialog(this);
        if (res == JFileChooser.APPROVE_OPTION){
            String pathS = fc.getSelectedFile().getAbsolutePath();
            
            Mat resFiltered = getMatFocus();
            
            if (resFiltered == null){
                JOptionPane.showConfirmDialog(this, "Please, select a threshold image to save it", 
                    "WRONG SELECTED", JOptionPane.OK_CANCEL_OPTION);
                return;
            }
            
            Imgcodecs.imwrite(pathS, resFiltered);
            
            JOptionPane.showConfirmDialog(this, "Image has been saved in: " + pathS, "SAVE IMAGE", JOptionPane.OK_CANCEL_OPTION);
        } 
        
    }//GEN-LAST:event_saveImageActionPerformed
    
    
    private Mat getMatFocus(){
        if(mainDesktop.getComponentCount() > 1){
            JInternalFrame frame = mainDesktop.getSelectedFrame();
            if (frame instanceof ActualWindow){
                return ((ActualWindow) frame).getFiltered();
            }
        }
        return null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InternalWindowsP8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InternalWindowsP8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InternalWindowsP8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InternalWindowsP8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InternalWindowsP8().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JMenuItem applyFilter;
    private javax.swing.JMenuItem closeWindow;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu image;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem loadImage;
    private javax.swing.JDesktopPane mainDesktop;
    private javax.swing.JMenu options;
    private javax.swing.JMenuItem saveImage;
    // End of variables declaration//GEN-END:variables
}
